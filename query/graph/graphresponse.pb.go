// Code generated by protoc-gen-go.
// source: graphresponse.proto
// DO NOT EDIT!

/*
Package graph is a generated protocol buffer package.

It is generated from these files:
	graphresponse.proto

It has these top-level messages:
	Request
	Value
	Latency
	Node
	Response
*/
package graph

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.ProtoPackageIsVersion1

type Request struct {
	Query string `protobuf:"bytes,1,opt,name=query" json:"query,omitempty"`
}

func (m *Request) Reset()                    { *m = Request{} }
func (m *Request) String() string            { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()               {}
func (*Request) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Value struct {
	Str string `protobuf:"bytes,1,opt,name=str" json:"str,omitempty"`
}

func (m *Value) Reset()                    { *m = Value{} }
func (m *Value) String() string            { return proto.CompactTextString(m) }
func (*Value) ProtoMessage()               {}
func (*Value) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type Latency struct {
	Parsing    string `protobuf:"bytes,1,opt,name=parsing" json:"parsing,omitempty"`
	Processing string `protobuf:"bytes,2,opt,name=processing" json:"processing,omitempty"`
	Pb         string `protobuf:"bytes,3,opt,name=pb" json:"pb,omitempty"`
}

func (m *Latency) Reset()                    { *m = Latency{} }
func (m *Latency) String() string            { return proto.CompactTextString(m) }
func (*Latency) ProtoMessage()               {}
func (*Latency) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type Node struct {
	Uid        uint64            `protobuf:"varint,1,opt,name=uid" json:"uid,omitempty"`
	Xid        string            `protobuf:"bytes,2,opt,name=xid" json:"xid,omitempty"`
	Attribute  string            `protobuf:"bytes,3,opt,name=attribute" json:"attribute,omitempty"`
	Properties map[string]*Value `protobuf:"bytes,4,rep,name=properties" json:"properties,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Children   []*Node           `protobuf:"bytes,5,rep,name=children" json:"children,omitempty"`
}

func (m *Node) Reset()                    { *m = Node{} }
func (m *Node) String() string            { return proto.CompactTextString(m) }
func (*Node) ProtoMessage()               {}
func (*Node) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Node) GetProperties() map[string]*Value {
	if m != nil {
		return m.Properties
	}
	return nil
}

func (m *Node) GetChildren() []*Node {
	if m != nil {
		return m.Children
	}
	return nil
}

type Response struct {
	N *Node    `protobuf:"bytes,1,opt,name=n" json:"n,omitempty"`
	L *Latency `protobuf:"bytes,2,opt,name=l" json:"l,omitempty"`
}

func (m *Response) Reset()                    { *m = Response{} }
func (m *Response) String() string            { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()               {}
func (*Response) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Response) GetN() *Node {
	if m != nil {
		return m.N
	}
	return nil
}

func (m *Response) GetL() *Latency {
	if m != nil {
		return m.L
	}
	return nil
}

func init() {
	proto.RegisterType((*Request)(nil), "graph.Request")
	proto.RegisterType((*Value)(nil), "graph.Value")
	proto.RegisterType((*Latency)(nil), "graph.Latency")
	proto.RegisterType((*Node)(nil), "graph.Node")
	proto.RegisterType((*Response)(nil), "graph.Response")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion2

// Client API for DGraph service

type DGraphClient interface {
	Query(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
}

type dGraphClient struct {
	cc *grpc.ClientConn
}

func NewDGraphClient(cc *grpc.ClientConn) DGraphClient {
	return &dGraphClient{cc}
}

func (c *dGraphClient) Query(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/graph.DGraph/Query", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for DGraph service

type DGraphServer interface {
	Query(context.Context, *Request) (*Response, error)
}

func RegisterDGraphServer(s *grpc.Server, srv DGraphServer) {
	s.RegisterService(&_DGraph_serviceDesc, srv)
}

func _DGraph_Query_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DGraphServer).Query(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/graph.DGraph/Query",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DGraphServer).Query(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

var _DGraph_serviceDesc = grpc.ServiceDesc{
	ServiceName: "graph.DGraph",
	HandlerType: (*DGraphServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Query",
			Handler:    _DGraph_Query_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

var fileDescriptor0 = []byte{
	// 336 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x5c, 0x52, 0x4d, 0x4f, 0x02, 0x31,
	0x10, 0xb5, 0xc0, 0xf2, 0x31, 0x18, 0x30, 0xa3, 0x87, 0x05, 0x8d, 0x92, 0x5e, 0x24, 0x1e, 0xf6,
	0x80, 0x1e, 0x8c, 0x1e, 0xd5, 0x78, 0xd0, 0x18, 0xad, 0x89, 0xf7, 0x05, 0x1a, 0xd8, 0xb8, 0xe9,
	0xae, 0x6d, 0xd7, 0xc8, 0x6f, 0xf7, 0xe2, 0x76, 0xb6, 0x20, 0xe1, 0xf6, 0xe6, 0xbd, 0xe9, 0x7b,
	0xed, 0x4c, 0xe1, 0x70, 0xa1, 0xe3, 0x7c, 0xa9, 0xa5, 0xc9, 0x33, 0x65, 0x64, 0x94, 0xeb, 0xcc,
	0x66, 0x18, 0x10, 0xc9, 0xcf, 0xa0, 0x25, 0xe4, 0x57, 0x21, 0x8d, 0xc5, 0x23, 0x08, 0x4a, 0xa0,
	0x57, 0x21, 0x1b, 0xb1, 0x71, 0x47, 0x54, 0x05, 0x1f, 0x40, 0xf0, 0x11, 0xa7, 0x85, 0xc4, 0x03,
	0xa8, 0x1b, 0xab, 0xbd, 0xe8, 0x20, 0x7f, 0x87, 0xd6, 0x73, 0x6c, 0xa5, 0x9a, 0xad, 0x30, 0x84,
	0x56, 0x1e, 0x6b, 0x93, 0xa8, 0x85, 0x6f, 0x58, 0x97, 0x78, 0x0a, 0x50, 0x06, 0xce, 0xa4, 0x21,
	0xb1, 0x46, 0xe2, 0x16, 0x83, 0x3d, 0xa8, 0xe5, 0xd3, 0xb0, 0x4e, 0x7c, 0x89, 0xf8, 0x2f, 0x83,
	0xc6, 0x4b, 0x36, 0xa7, 0xbc, 0x22, 0x99, 0x93, 0x5d, 0x43, 0x38, 0xe8, 0x98, 0x9f, 0x92, 0xa9,
	0x3c, 0x1c, 0xc4, 0x13, 0xe8, 0xc4, 0xd6, 0xea, 0x64, 0x5a, 0x58, 0xe9, 0x3d, 0xfe, 0x09, 0xbc,
	0xa5, 0xe8, 0x5c, 0x6a, 0x9b, 0x48, 0x13, 0x36, 0x46, 0xf5, 0x71, 0x77, 0x72, 0x1c, 0xd1, 0xbb,
	0x23, 0x17, 0x11, 0xbd, 0x6e, 0xd4, 0x07, 0x65, 0xf5, 0x4a, 0x6c, 0xb5, 0xe3, 0x39, 0xb4, 0x67,
	0xcb, 0x24, 0x9d, 0x6b, 0xa9, 0xc2, 0x80, 0x8e, 0x76, 0xb7, 0x8e, 0x8a, 0x8d, 0x38, 0x7c, 0x82,
	0xfe, 0x8e, 0x8f, 0xbb, 0xe8, 0xa7, 0x5c, 0xcf, 0xd1, 0x41, 0xe4, 0x10, 0x7c, 0xbb, 0x29, 0xd2,
	0xe5, 0xbb, 0x93, 0x7d, 0x6f, 0x45, 0x93, 0x15, 0x95, 0x74, 0x53, 0xbb, 0x66, 0xfc, 0x0e, 0xda,
	0xc2, 0xef, 0x09, 0x07, 0xc0, 0x14, 0x79, 0xec, 0x44, 0x33, 0x55, 0xbe, 0x9b, 0xa5, 0xde, 0xaa,
	0xe7, 0x25, 0xbf, 0x09, 0xc1, 0xd2, 0xc9, 0x15, 0x34, 0xef, 0x1f, 0x1d, 0x89, 0x17, 0x10, 0xbc,
	0xb9, 0x2d, 0xe2, 0xba, 0xcb, 0xef, 0x7a, 0xd8, 0xdf, 0xd4, 0x55, 0x18, 0xdf, 0x9b, 0x36, 0xe9,
	0x5f, 0x5c, 0xfe, 0x05, 0x00, 0x00, 0xff, 0xff, 0xeb, 0x75, 0x69, 0x89, 0x2e, 0x02, 0x00, 0x00,
}
